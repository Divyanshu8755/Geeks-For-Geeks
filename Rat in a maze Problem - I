class Solution {
    public static ArrayList<String> findPath(int[][] m, int n) {
        // Your code here
        int vst[][]=new int[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                vst[i][j]=0;
            }
        }
        ArrayList < String > l = new ArrayList < > ();
        if(m[0][0]==1) solve(0,0,l,vst,m,"",n);
        return l;
    }
    public static void solve(int i,int j,List<String> l,int[][] vst,int[][] m,String ans,int n){
        if(i==n-1 && j==n-1){
            l.add(ans);
            return;
        }
        //Downward
        if(i+1<n && vst[i+1][j]==0 && m[i+1][j]==1){
            vst[i][j]=1;
            solve(i+1,j,l,vst,m,ans+'D',n);
            vst[i][j]=0;
        }
        //left
        if(j-1>=0 && vst[i][j-1]==0 && m[i][j-1]==1){
            vst[i][j]=1;
            solve(i,j-1,l,vst,m,ans+'L',n);
            vst[i][j]=0;
        }
        //right
        if(j+1<n && vst[i][j+1]==0 && m[i][j+1]==1){
            vst[i][j]=1;
            solve(i,j+1,l,vst,m,ans+'R',n);
            vst[i][j]=0;
        }
        //upward
        if(i-1>=0 && vst[i-1][j]==0 && m[i-1][j]==1){
            vst[i][j]=1;
            solve(i-1,j,l,vst,m,ans+'U',n);
            vst[i][j]=0;
        }
    }
}
